(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-runtime"] = {}));
})(this, (function (exports) { 'use strict';

  /**
   *  防止比别人滥用ReactElement， 所以要将ReactElement定义为独一无二的Symbol对象
   */
  // 先判断当前的环境是否支持Symbol
  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;

  // ReactElement 构造函数实现
  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE, // 内部字段, 指明当前字段是reactElement
          type,
          key,
          ref,
          props,
          __mark: 'khs', // 该字段是为了与真实的react项目区分开
      };
      return element;
  };
  // jsx 函数实现
  const jsx = (type, config, ...maybeChildren) => {
      let key = null;
      let ref = null;
      const props = {};
      // 遍历config
      for (const prop in config) {
          const val = config[prop];
          // 1. 单独找出 key和ref字段
          if (prop === 'key') {
              if (val !== undefined) {
                  key = '' + val;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          // 2. 剩下的如果是config自身的prop, 则正常取出
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      const maybeChildrenLength = maybeChildren.length;
      if (maybeChildrenLength) {
          // [child] 或 [child, child, child]
          if (maybeChildrenLength === 1) {
              props.child = maybeChildren[0];
          }
          else {
              props.child = maybeChildren;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  // jsxDEV 函数实现
  const jsxDEV = (type, config) => {
      let key = null;
      let ref = null;
      const props = {};
      // 遍历config
      for (const prop in config) {
          const val = config[prop];
          // 1. 单独找出 key和ref字段
          if (prop === 'key') {
              if (val !== undefined) {
                  key = '' + val;
              }
              continue;
          }
          if (prop === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          // 2. 剩下的如果是config自身的prop, 则正常取出
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };

  exports.jsx = jsx;
  exports.jsxDEV = jsxDEV;

}));
